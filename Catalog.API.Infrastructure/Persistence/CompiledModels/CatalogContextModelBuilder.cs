// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MyCompiledModels
{
    public partial class CatalogContextModel
    {
        partial void Initialize()
        {
            var brand = BrandEntityType.Create(this);
            var product = ProductEntityType.Create(this);

            ProductEntityType.CreateForeignKey1(product, brand);

            BrandEntityType.CreateAnnotations(brand);
            ProductEntityType.CreateAnnotations(product);

            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var brand = FindEntityType("Catalog.API.Domain.Entities.Brand")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            brand.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var catalogAPIDomainEntitiesBrandTableBase = new TableBase("Catalog.API.Domain.Entities.Brand", null, relationalModel);
            var brandNameColumnBase = new ColumnBase<ColumnMappingBase>("BrandName", "nvarchar(100)", catalogAPIDomainEntitiesBrandTableBase);
            catalogAPIDomainEntitiesBrandTableBase.Columns.Add("BrandName", brandNameColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", catalogAPIDomainEntitiesBrandTableBase);
            catalogAPIDomainEntitiesBrandTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", catalogAPIDomainEntitiesBrandTableBase);
            catalogAPIDomainEntitiesBrandTableBase.Columns.Add("Id", idColumnBase);
            relationalModel.DefaultTables.Add("Catalog.API.Domain.Entities.Brand", catalogAPIDomainEntitiesBrandTableBase);
            var catalogAPIDomainEntitiesBrandMappingBase = new TableMappingBase<ColumnMappingBase>(brand, catalogAPIDomainEntitiesBrandTableBase, true);
            catalogAPIDomainEntitiesBrandTableBase.AddTypeMapping(catalogAPIDomainEntitiesBrandMappingBase, false);
            defaultTableMappings.Add(catalogAPIDomainEntitiesBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, brand.FindProperty("Id")!, catalogAPIDomainEntitiesBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brandNameColumnBase, brand.FindProperty("BrandName")!, catalogAPIDomainEntitiesBrandMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, brand.FindProperty("Description")!, catalogAPIDomainEntitiesBrandMappingBase);

            var tableMappings = new List<TableMapping>();
            brand.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var catalogBrandTable = new Table("CatalogBrand", null, relationalModel);
            var idColumn = new Column("Id", "int", catalogBrandTable);
            catalogBrandTable.Columns.Add("Id", idColumn);
            var brandNameColumn = new Column("BrandName", "nvarchar(100)", catalogBrandTable);
            catalogBrandTable.Columns.Add("BrandName", brandNameColumn);
            var descriptionColumn = new Column("Description", "nvarchar(max)", catalogBrandTable);
            catalogBrandTable.Columns.Add("Description", descriptionColumn);
            var pK_CatalogBrand = new UniqueConstraint("PK_CatalogBrand", catalogBrandTable, new[] { idColumn });
            catalogBrandTable.PrimaryKey = pK_CatalogBrand;
            var pK_CatalogBrandUc = RelationalModel.GetKey(this,
                "Catalog.API.Domain.Entities.Brand",
                new[] { "Id" });
            pK_CatalogBrand.MappedKeys.Add(pK_CatalogBrandUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CatalogBrandUc).Add(pK_CatalogBrand);
            catalogBrandTable.UniqueConstraints.Add("PK_CatalogBrand", pK_CatalogBrand);
            relationalModel.Tables.Add(("CatalogBrand", null), catalogBrandTable);
            var catalogBrandTableMapping = new TableMapping(brand, catalogBrandTable, true);
            catalogBrandTable.AddTypeMapping(catalogBrandTableMapping, false);
            tableMappings.Add(catalogBrandTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, brand.FindProperty("Id")!, catalogBrandTableMapping);
            RelationalModel.CreateColumnMapping(brandNameColumn, brand.FindProperty("BrandName")!, catalogBrandTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, brand.FindProperty("Description")!, catalogBrandTableMapping);

            var product = FindEntityType("Catalog.API.Domain.Entities.Product")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var catalogAPIDomainEntitiesProductTableBase = new TableBase("Catalog.API.Domain.Entities.Product", null, relationalModel);
            var brandIdColumnBase = new ColumnBase<ColumnMappingBase>("BrandId", "int", catalogAPIDomainEntitiesProductTableBase);
            catalogAPIDomainEntitiesProductTableBase.Columns.Add("BrandId", brandIdColumnBase);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", catalogAPIDomainEntitiesProductTableBase);
            catalogAPIDomainEntitiesProductTableBase.Columns.Add("Description", descriptionColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", catalogAPIDomainEntitiesProductTableBase);
            catalogAPIDomainEntitiesProductTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(50)", catalogAPIDomainEntitiesProductTableBase);
            catalogAPIDomainEntitiesProductTableBase.Columns.Add("Name", nameColumnBase);
            var pictureUriColumnBase = new ColumnBase<ColumnMappingBase>("PictureUri", "nvarchar(max)", catalogAPIDomainEntitiesProductTableBase)
            {
                IsNullable = true
            };
            catalogAPIDomainEntitiesProductTableBase.Columns.Add("PictureUri", pictureUriColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "decimal(18,2)", catalogAPIDomainEntitiesProductTableBase);
            catalogAPIDomainEntitiesProductTableBase.Columns.Add("Price", priceColumnBase);
            relationalModel.DefaultTables.Add("Catalog.API.Domain.Entities.Product", catalogAPIDomainEntitiesProductTableBase);
            var catalogAPIDomainEntitiesProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, catalogAPIDomainEntitiesProductTableBase, true);
            catalogAPIDomainEntitiesProductTableBase.AddTypeMapping(catalogAPIDomainEntitiesProductMappingBase, false);
            defaultTableMappings0.Add(catalogAPIDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, product.FindProperty("Id")!, catalogAPIDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)brandIdColumnBase, product.FindProperty("BrandId")!, catalogAPIDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, product.FindProperty("Description")!, catalogAPIDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, product.FindProperty("Name")!, catalogAPIDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pictureUriColumnBase, product.FindProperty("PictureUri")!, catalogAPIDomainEntitiesProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, product.FindProperty("Price")!, catalogAPIDomainEntitiesProductMappingBase);

            var tableMappings0 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var productTable = new Table("Product", null, relationalModel);
            var idColumn0 = new Column("Id", "int", productTable);
            productTable.Columns.Add("Id", idColumn0);
            var brandIdColumn = new Column("BrandId", "int", productTable);
            productTable.Columns.Add("BrandId", brandIdColumn);
            var descriptionColumn0 = new Column("Description", "nvarchar(max)", productTable);
            productTable.Columns.Add("Description", descriptionColumn0);
            var nameColumn = new Column("Name", "nvarchar(50)", productTable);
            productTable.Columns.Add("Name", nameColumn);
            var pictureUriColumn = new Column("PictureUri", "nvarchar(max)", productTable)
            {
                IsNullable = true
            };
            productTable.Columns.Add("PictureUri", pictureUriColumn);
            var priceColumn = new Column("Price", "decimal(18,2)", productTable);
            productTable.Columns.Add("Price", priceColumn);
            var pK_Product = new UniqueConstraint("PK_Product", productTable, new[] { idColumn0 });
            productTable.PrimaryKey = pK_Product;
            var pK_ProductUc = RelationalModel.GetKey(this,
                "Catalog.API.Domain.Entities.Product",
                new[] { "Id" });
            pK_Product.MappedKeys.Add(pK_ProductUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductUc).Add(pK_Product);
            productTable.UniqueConstraints.Add("PK_Product", pK_Product);
            var iX_Product_BrandId = new TableIndex(
            "IX_Product_BrandId", productTable, new[] { brandIdColumn }, false);
            var iX_Product_BrandIdIx = RelationalModel.GetIndex(this,
                "Catalog.API.Domain.Entities.Product",
                new[] { "BrandId" });
            iX_Product_BrandId.MappedIndexes.Add(iX_Product_BrandIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Product_BrandIdIx).Add(iX_Product_BrandId);
            productTable.Indexes.Add("IX_Product_BrandId", iX_Product_BrandId);
            relationalModel.Tables.Add(("Product", null), productTable);
            var productTableMapping = new TableMapping(product, productTable, true);
            productTable.AddTypeMapping(productTableMapping, false);
            tableMappings0.Add(productTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, product.FindProperty("Id")!, productTableMapping);
            RelationalModel.CreateColumnMapping(brandIdColumn, product.FindProperty("BrandId")!, productTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, product.FindProperty("Description")!, productTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, product.FindProperty("Name")!, productTableMapping);
            RelationalModel.CreateColumnMapping(pictureUriColumn, product.FindProperty("PictureUri")!, productTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, product.FindProperty("Price")!, productTableMapping);
            var fK_Product_CatalogBrand_BrandId = new ForeignKeyConstraint(
                "FK_Product_CatalogBrand_BrandId", productTable, catalogBrandTable,
                new[] { brandIdColumn },
                catalogBrandTable.FindUniqueConstraint("PK_CatalogBrand")!, ReferentialAction.Cascade);
            var fK_Product_CatalogBrand_BrandIdFk = RelationalModel.GetForeignKey(this,
                "Catalog.API.Domain.Entities.Product",
                new[] { "BrandId" },
                "Catalog.API.Domain.Entities.Brand",
                new[] { "Id" });
            fK_Product_CatalogBrand_BrandId.MappedForeignKeys.Add(fK_Product_CatalogBrand_BrandIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Product_CatalogBrand_BrandIdFk).Add(fK_Product_CatalogBrand_BrandId);
            productTable.ForeignKeyConstraints.Add(fK_Product_CatalogBrand_BrandId);
            catalogBrandTable.ReferencingForeignKeyConstraints.Add(fK_Product_CatalogBrand_BrandId);
            return relationalModel.MakeReadOnly();
        }
    }
}
